@using System.Collections;
@inject IndiConnectionManager IndiConnectionManager;

@if (reconnect) {

<DeviceSetup @ref=devices />

<div class="w3-container w3-padding">
    <button class="w3-right w3-button w3-blue" @onclick=confirm>Next &#x203A;</button>
</div>

} else {

<div style="width: 80vw; margin: 4px auto; overflow-x: auto; overflow-y: hidden;">
    <div class="w3-bar w3-round w3-dark-grey">
        <button class="w3-button w3-bar-item" @onclick=disconnect title="disconnect">
            <img src="/assets/disconnect.svg" width=32 height=32>
        </button>
        <button class="w3-button w3-bar-item" @onclick=updateTelescopeProperties title="refresh properties">
            <img src="/assets/updateProperties.svg" width=32 height=32>
        </button>
        <button class="w3-button w3-bar-item" @onclick=viewTelescopeProperties title="inspect properties">
            <img src="/assets/viewProperties.svg" width=32 height=32>
        </button>
        <button class="w3-button w3-bar-item" @onclick=pickSpeed title="speed">
            <img src="/assets/speed.svg" width=32 height=32>
        </button>
        <button class="w3-button w3-bar-item w3-display-container" @onclick=picklocation title="location">
            <img src="/assets/location.svg" width=32 height=32>
            @if(telescope == null || !telescope.IsPositioned) {
            <span class="w3-badge w3-red w3-display-topright">!</span>
            }
        </button>
        <button class="w3-button w3-bar-item w3-display-container" @onclick=pickorientation title="orientation">
            <img src="/assets/orientation.svg" width=32 height=32>
            @if(telescope == null || !telescope.IsOrientated) {
            <span class="w3-badge w3-red w3-display-topright">!</span>
            }
        </button>
        @if((telescope != null && telescope.IsAligned) || forceShowGoto) {
        <button class="w3-button w3-bar-item" title="goto" @onclick=pickgoto>
            <img src="/assets/track.svg" width=32 height=32>
        </button>
        }
    </div>
</div>

<Dpad OnDirectionChange=steer InvertY=true/>

<Popup @ref=popup>
    <PropertyDrawer @ref=drawer/>
</Popup>

<SpeedSelector @ref=speed OnSpeedChange=telescopeSetSpeed></SpeedSelector>

<LocationPicker @ref=location OnLocationChanged=telescopeSetPosition></LocationPicker>

<AlignmentPicker @ref=orientation OnOrientationChanged=telescopeSetOrientation></AlignmentPicker>

<GotoDialog @ref=track OnGoto=telescopeGoto></GotoDialog>

}

<Dialog @ref=dialog></Dialog>

@code {
    private bool reconnect = true;
    private bool forceShowGoto = true;
    private DeviceSetup devices;
    private IndiTelescopeController telescope;
    private Dialog dialog;
    private Popup popup;
    private LocationPicker location;
    private AlignmentPicker orientation;
    private GotoDialog track;
    private SpeedSelector speed;
    private PropertyDrawer drawer;

    private void confirm() {
        if (IndiConnectionManager.IsConnected() && devices.SelectedMount != null) {
            reconnect = false;
            telescope = new IndiTelescopeController(devices.SelectedMount);
            telescope.Connect();
        } else {
            dialog.Show("No Device", "A valid INDI device must be selected to control");
        }
    }

    private void disconnect() {
        telescope?.Disconnect();
        IndiConnectionManager?.Disconnect();
        reconnect = true;
        telescope = null;
    }

    private void picklocation() {
        location.Show();
    }

    private void pickorientation() {
        orientation.Show();
    }

    private void pickSpeed() {
        speed.Show();
    }

    private void pickgoto() {
        track.Show();
    }

    private void updateTelescopeProperties() {
        IndiConnectionManager.RefreshAll();
    }
    private void viewTelescopeProperties() {
        this.drawer.Clear();
        this.drawer.Update(devices.SelectedMount.Properties);
        this.popup.Show();
    }

    private void telescopeSetSpeed(SlewRate rate) {
        if (telescope != null) {
            try {
                telescope.SetSlewRate(rate);
            } catch (Exception e) {
                dialog.Show("Error", e.Message);
            }
        }
    }

    private void telescopeSetPosition(double lat, double lon, double alt) {
        try {
            if (telescope != null) {
                telescope.SetLocation(lat, lon, alt);
            } else {
                throw new Exception("No telescope");
            }
        } catch (Exception e) {
            dialog.Show("Error", e.Message);
        }
    }

    private void telescopeSetOrientation(bool JNow, double ra, double dec) {
        try {
            if (telescope != null) {
                // Say we are looking at THIS star at THIS time
                telescope.SetOrientation(ra, dec, J2000: !JNow);
                telescope.SetTimeToClient(); // Update the local time of the app to match the phone time
            } else {
                throw new Exception("No telescope");
            }
        } catch (Exception e) {
            dialog.Show("Error", e.Message);
        }
    }

    private void telescopeGoto(double raDegrees, double decDegrees) {
        try {
            if (telescope != null) {
                telescope.Goto(raDegrees, decDegrees, J2000: true);
            } else {
                throw new Exception("No telescope");
            }
        } catch (Exception e) {
            dialog.Show("Error", e.Message);
        }
    }

    private void steer(float x, float y) {
        try {
            if (x == 0 && y == 0) {
                telescope.Rotate(Direction.None);
            } else if (x == 0 && y > 0) {
                telescope.Rotate(Direction.North);
            } else if (x == 0 && y < 0) {
                telescope.Rotate(Direction.South);
            } else if (x < 0 && y == 0) {
                telescope.Rotate(Direction.West);
            } else if (x > 0 && y == 0) {
                telescope.Rotate(Direction.East);
            } else if (x < 0 && y > 0) {
                telescope.Rotate(Direction.NorthEast);
            } else if (x > 0 && y > 0) {
                telescope.Rotate(Direction.NorthWest);
            } else if (x < 0 && y < 0) {
                telescope.Rotate(Direction.SouthEast);
            } else if (x > 0 && y < 0) {
                telescope.Rotate(Direction.SouthWest);
            }
        } catch (Exception e) {
            dialog.Show("Error", e.Message);
        }
    }
}